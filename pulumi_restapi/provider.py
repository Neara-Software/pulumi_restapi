# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from ._inputs import *

__all__ = ['ProviderArgs', 'Provider']

@pulumi.input_type
class ProviderArgs:
    def __init__(__self__, *,
                 uri: pulumi.Input[builtins.str],
                 cert_file: Optional[pulumi.Input[builtins.str]] = None,
                 cert_string: Optional[pulumi.Input[builtins.str]] = None,
                 copy_keys: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 create_method: Optional[pulumi.Input[builtins.str]] = None,
                 create_returns_object: Optional[pulumi.Input[builtins.bool]] = None,
                 debug: Optional[pulumi.Input[builtins.bool]] = None,
                 destroy_method: Optional[pulumi.Input[builtins.str]] = None,
                 headers: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 id_attribute: Optional[pulumi.Input[builtins.str]] = None,
                 insecure: Optional[pulumi.Input[builtins.bool]] = None,
                 key_file: Optional[pulumi.Input[builtins.str]] = None,
                 key_string: Optional[pulumi.Input[builtins.str]] = None,
                 oauth_client_credentials: Optional[pulumi.Input['ProviderOauthClientCredentialsArgs']] = None,
                 password: Optional[pulumi.Input[builtins.str]] = None,
                 rate_limit: Optional[pulumi.Input[builtins.float]] = None,
                 read_method: Optional[pulumi.Input[builtins.str]] = None,
                 root_ca_file: Optional[pulumi.Input[builtins.str]] = None,
                 root_ca_string: Optional[pulumi.Input[builtins.str]] = None,
                 test_path: Optional[pulumi.Input[builtins.str]] = None,
                 timeout: Optional[pulumi.Input[builtins.float]] = None,
                 update_method: Optional[pulumi.Input[builtins.str]] = None,
                 use_cookies: Optional[pulumi.Input[builtins.bool]] = None,
                 username: Optional[pulumi.Input[builtins.str]] = None,
                 write_returns_object: Optional[pulumi.Input[builtins.bool]] = None,
                 xssi_prefix: Optional[pulumi.Input[builtins.str]] = None):
        """
        The set of arguments for constructing a Provider resource.
        :param pulumi.Input[builtins.str] uri: URI of the REST API endpoint. This serves as the base of all requests.
        :param pulumi.Input[builtins.str] cert_file: When set with the key_file parameter, the provider will load a client certificate as a file for mTLS authentication.
        :param pulumi.Input[builtins.str] cert_string: When set with the key_string parameter, the provider will load a client certificate as a string for mTLS authentication.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] copy_keys: When set, any PUT to the API for an object will copy these keys from the data the provider has gathered about the
               object. This is useful if internal API information must also be provided with updates, such as the revision of the
               object.
        :param pulumi.Input[builtins.str] create_method: Defaults to `POST`. The HTTP method used to CREATE objects of this type on the API server.
        :param pulumi.Input[builtins.bool] create_returns_object: Set this when the API returns the object created only on creation operations (POST). This is used by the provider to
               refresh internal data structures.
        :param pulumi.Input[builtins.bool] debug: Enabling this will cause lots of debug information to be printed to STDOUT by the API client.
        :param pulumi.Input[builtins.str] destroy_method: Defaults to `DELETE`. The HTTP method used to DELETE objects of this type on the API server.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] headers: A map of header names and values to set on all outbound requests. This is useful if you want to use a script via the
               'external' provider or provide a pre-approved token or change Content-Type from `application/json`. If `username` and
               `password` are set and Authorization is one of the headers defined here, the BASIC auth credentials take precedence.
        :param pulumi.Input[builtins.str] id_attribute: When set, this key will be used to operate on REST objects. For example, if the ID is set to 'name', changes to the API
               object will be to http://foo.com/bar/VALUE_OF_NAME. This value may also be a '/'-delimeted path to the id attribute if
               it is multple levels deep in the data (such as `attributes/id` in the case of an object `{ "attributes": { "id": 1234 },
               "config": { "name": "foo", "something": "bar"}}`
        :param pulumi.Input[builtins.bool] insecure: When using https, this disables TLS verification of the host.
        :param pulumi.Input[builtins.str] key_file: When set with the cert_file parameter, the provider will load a client certificate as a file for mTLS authentication.
               Note that this mechanism simply delegates to golang's tls.LoadX509KeyPair which does not support passphrase protected
               private keys. The most robust security protections available to the key_file are simple file system permissions.
        :param pulumi.Input[builtins.str] key_string: When set with the cert_string parameter, the provider will load a client certificate as a string for mTLS
               authentication. Note that this mechanism simply delegates to golang's tls.LoadX509KeyPair which does not support
               passphrase protected private keys. The most robust security protections available to the key_file are simple file system
               permissions.
        :param pulumi.Input['ProviderOauthClientCredentialsArgs'] oauth_client_credentials: Configuration for oauth client credential flow using the https://pkg.go.dev/golang.org/x/oauth2 implementation
        :param pulumi.Input[builtins.str] password: When set, will use this password for BASIC auth to the API.
        :param pulumi.Input[builtins.float] rate_limit: Set this to limit the number of requests per second made to the API.
        :param pulumi.Input[builtins.str] read_method: Defaults to `GET`. The HTTP method used to READ objects of this type on the API server.
        :param pulumi.Input[builtins.str] root_ca_file: When set, the provider will load a root CA certificate as a file for mTLS authentication. This is useful when the API
               server is using a self-signed certificate and the client needs to trust it.
        :param pulumi.Input[builtins.str] root_ca_string: When set, the provider will load a root CA certificate as a string for mTLS authentication. This is useful when the API
               server is using a self-signed certificate and the client needs to trust it.
        :param pulumi.Input[builtins.str] test_path: If set, the provider will issue a read_method request to this path after instantiation requiring a 200 OK response
               before proceeding. This is useful if your API provides a no-op endpoint that can signal if this provider is configured
               correctly. Response data will be ignored.
        :param pulumi.Input[builtins.float] timeout: When set, will cause requests taking longer than this time (in seconds) to be aborted.
        :param pulumi.Input[builtins.str] update_method: Defaults to `PUT`. The HTTP method used to UPDATE objects of this type on the API server.
        :param pulumi.Input[builtins.bool] use_cookies: Enable cookie jar to persist session.
        :param pulumi.Input[builtins.str] username: When set, will use this username for BASIC auth to the API.
        :param pulumi.Input[builtins.bool] write_returns_object: Set this when the API returns the object created on all write operations (POST, PUT). This is used by the provider to
               refresh internal data structures.
        :param pulumi.Input[builtins.str] xssi_prefix: Trim the xssi prefix from response string, if present, before parsing.
        """
        pulumi.set(__self__, "uri", uri)
        if cert_file is not None:
            pulumi.set(__self__, "cert_file", cert_file)
        if cert_string is not None:
            pulumi.set(__self__, "cert_string", cert_string)
        if copy_keys is not None:
            pulumi.set(__self__, "copy_keys", copy_keys)
        if create_method is not None:
            pulumi.set(__self__, "create_method", create_method)
        if create_returns_object is not None:
            pulumi.set(__self__, "create_returns_object", create_returns_object)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if destroy_method is not None:
            pulumi.set(__self__, "destroy_method", destroy_method)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if id_attribute is not None:
            pulumi.set(__self__, "id_attribute", id_attribute)
        if insecure is not None:
            pulumi.set(__self__, "insecure", insecure)
        if key_file is not None:
            pulumi.set(__self__, "key_file", key_file)
        if key_string is not None:
            pulumi.set(__self__, "key_string", key_string)
        if oauth_client_credentials is not None:
            pulumi.set(__self__, "oauth_client_credentials", oauth_client_credentials)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if rate_limit is not None:
            pulumi.set(__self__, "rate_limit", rate_limit)
        if read_method is not None:
            pulumi.set(__self__, "read_method", read_method)
        if root_ca_file is not None:
            pulumi.set(__self__, "root_ca_file", root_ca_file)
        if root_ca_string is not None:
            pulumi.set(__self__, "root_ca_string", root_ca_string)
        if test_path is not None:
            pulumi.set(__self__, "test_path", test_path)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if update_method is not None:
            pulumi.set(__self__, "update_method", update_method)
        if use_cookies is not None:
            pulumi.set(__self__, "use_cookies", use_cookies)
        if username is not None:
            pulumi.set(__self__, "username", username)
        if write_returns_object is not None:
            pulumi.set(__self__, "write_returns_object", write_returns_object)
        if xssi_prefix is not None:
            pulumi.set(__self__, "xssi_prefix", xssi_prefix)

    @property
    @pulumi.getter
    def uri(self) -> pulumi.Input[builtins.str]:
        """
        URI of the REST API endpoint. This serves as the base of all requests.
        """
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "uri", value)

    @property
    @pulumi.getter(name="certFile")
    def cert_file(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        When set with the key_file parameter, the provider will load a client certificate as a file for mTLS authentication.
        """
        return pulumi.get(self, "cert_file")

    @cert_file.setter
    def cert_file(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "cert_file", value)

    @property
    @pulumi.getter(name="certString")
    def cert_string(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        When set with the key_string parameter, the provider will load a client certificate as a string for mTLS authentication.
        """
        return pulumi.get(self, "cert_string")

    @cert_string.setter
    def cert_string(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "cert_string", value)

    @property
    @pulumi.getter(name="copyKeys")
    def copy_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        When set, any PUT to the API for an object will copy these keys from the data the provider has gathered about the
        object. This is useful if internal API information must also be provided with updates, such as the revision of the
        object.
        """
        return pulumi.get(self, "copy_keys")

    @copy_keys.setter
    def copy_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "copy_keys", value)

    @property
    @pulumi.getter(name="createMethod")
    def create_method(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Defaults to `POST`. The HTTP method used to CREATE objects of this type on the API server.
        """
        return pulumi.get(self, "create_method")

    @create_method.setter
    def create_method(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "create_method", value)

    @property
    @pulumi.getter(name="createReturnsObject")
    def create_returns_object(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Set this when the API returns the object created only on creation operations (POST). This is used by the provider to
        refresh internal data structures.
        """
        return pulumi.get(self, "create_returns_object")

    @create_returns_object.setter
    def create_returns_object(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "create_returns_object", value)

    @property
    @pulumi.getter
    def debug(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Enabling this will cause lots of debug information to be printed to STDOUT by the API client.
        """
        return pulumi.get(self, "debug")

    @debug.setter
    def debug(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "debug", value)

    @property
    @pulumi.getter(name="destroyMethod")
    def destroy_method(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Defaults to `DELETE`. The HTTP method used to DELETE objects of this type on the API server.
        """
        return pulumi.get(self, "destroy_method")

    @destroy_method.setter
    def destroy_method(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "destroy_method", value)

    @property
    @pulumi.getter
    def headers(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        A map of header names and values to set on all outbound requests. This is useful if you want to use a script via the
        'external' provider or provide a pre-approved token or change Content-Type from `application/json`. If `username` and
        `password` are set and Authorization is one of the headers defined here, the BASIC auth credentials take precedence.
        """
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "headers", value)

    @property
    @pulumi.getter(name="idAttribute")
    def id_attribute(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        When set, this key will be used to operate on REST objects. For example, if the ID is set to 'name', changes to the API
        object will be to http://foo.com/bar/VALUE_OF_NAME. This value may also be a '/'-delimeted path to the id attribute if
        it is multple levels deep in the data (such as `attributes/id` in the case of an object `{ "attributes": { "id": 1234 },
        "config": { "name": "foo", "something": "bar"}}`
        """
        return pulumi.get(self, "id_attribute")

    @id_attribute.setter
    def id_attribute(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "id_attribute", value)

    @property
    @pulumi.getter
    def insecure(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        When using https, this disables TLS verification of the host.
        """
        return pulumi.get(self, "insecure")

    @insecure.setter
    def insecure(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "insecure", value)

    @property
    @pulumi.getter(name="keyFile")
    def key_file(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        When set with the cert_file parameter, the provider will load a client certificate as a file for mTLS authentication.
        Note that this mechanism simply delegates to golang's tls.LoadX509KeyPair which does not support passphrase protected
        private keys. The most robust security protections available to the key_file are simple file system permissions.
        """
        return pulumi.get(self, "key_file")

    @key_file.setter
    def key_file(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "key_file", value)

    @property
    @pulumi.getter(name="keyString")
    def key_string(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        When set with the cert_string parameter, the provider will load a client certificate as a string for mTLS
        authentication. Note that this mechanism simply delegates to golang's tls.LoadX509KeyPair which does not support
        passphrase protected private keys. The most robust security protections available to the key_file are simple file system
        permissions.
        """
        return pulumi.get(self, "key_string")

    @key_string.setter
    def key_string(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "key_string", value)

    @property
    @pulumi.getter(name="oauthClientCredentials")
    def oauth_client_credentials(self) -> Optional[pulumi.Input['ProviderOauthClientCredentialsArgs']]:
        """
        Configuration for oauth client credential flow using the https://pkg.go.dev/golang.org/x/oauth2 implementation
        """
        return pulumi.get(self, "oauth_client_credentials")

    @oauth_client_credentials.setter
    def oauth_client_credentials(self, value: Optional[pulumi.Input['ProviderOauthClientCredentialsArgs']]):
        pulumi.set(self, "oauth_client_credentials", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        When set, will use this password for BASIC auth to the API.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="rateLimit")
    def rate_limit(self) -> Optional[pulumi.Input[builtins.float]]:
        """
        Set this to limit the number of requests per second made to the API.
        """
        return pulumi.get(self, "rate_limit")

    @rate_limit.setter
    def rate_limit(self, value: Optional[pulumi.Input[builtins.float]]):
        pulumi.set(self, "rate_limit", value)

    @property
    @pulumi.getter(name="readMethod")
    def read_method(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Defaults to `GET`. The HTTP method used to READ objects of this type on the API server.
        """
        return pulumi.get(self, "read_method")

    @read_method.setter
    def read_method(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "read_method", value)

    @property
    @pulumi.getter(name="rootCaFile")
    def root_ca_file(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        When set, the provider will load a root CA certificate as a file for mTLS authentication. This is useful when the API
        server is using a self-signed certificate and the client needs to trust it.
        """
        return pulumi.get(self, "root_ca_file")

    @root_ca_file.setter
    def root_ca_file(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "root_ca_file", value)

    @property
    @pulumi.getter(name="rootCaString")
    def root_ca_string(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        When set, the provider will load a root CA certificate as a string for mTLS authentication. This is useful when the API
        server is using a self-signed certificate and the client needs to trust it.
        """
        return pulumi.get(self, "root_ca_string")

    @root_ca_string.setter
    def root_ca_string(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "root_ca_string", value)

    @property
    @pulumi.getter(name="testPath")
    def test_path(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        If set, the provider will issue a read_method request to this path after instantiation requiring a 200 OK response
        before proceeding. This is useful if your API provides a no-op endpoint that can signal if this provider is configured
        correctly. Response data will be ignored.
        """
        return pulumi.get(self, "test_path")

    @test_path.setter
    def test_path(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "test_path", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[builtins.float]]:
        """
        When set, will cause requests taking longer than this time (in seconds) to be aborted.
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[builtins.float]]):
        pulumi.set(self, "timeout", value)

    @property
    @pulumi.getter(name="updateMethod")
    def update_method(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Defaults to `PUT`. The HTTP method used to UPDATE objects of this type on the API server.
        """
        return pulumi.get(self, "update_method")

    @update_method.setter
    def update_method(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "update_method", value)

    @property
    @pulumi.getter(name="useCookies")
    def use_cookies(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Enable cookie jar to persist session.
        """
        return pulumi.get(self, "use_cookies")

    @use_cookies.setter
    def use_cookies(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "use_cookies", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        When set, will use this username for BASIC auth to the API.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter(name="writeReturnsObject")
    def write_returns_object(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Set this when the API returns the object created on all write operations (POST, PUT). This is used by the provider to
        refresh internal data structures.
        """
        return pulumi.get(self, "write_returns_object")

    @write_returns_object.setter
    def write_returns_object(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "write_returns_object", value)

    @property
    @pulumi.getter(name="xssiPrefix")
    def xssi_prefix(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Trim the xssi prefix from response string, if present, before parsing.
        """
        return pulumi.get(self, "xssi_prefix")

    @xssi_prefix.setter
    def xssi_prefix(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "xssi_prefix", value)


class Provider(pulumi.ProviderResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cert_file: Optional[pulumi.Input[builtins.str]] = None,
                 cert_string: Optional[pulumi.Input[builtins.str]] = None,
                 copy_keys: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 create_method: Optional[pulumi.Input[builtins.str]] = None,
                 create_returns_object: Optional[pulumi.Input[builtins.bool]] = None,
                 debug: Optional[pulumi.Input[builtins.bool]] = None,
                 destroy_method: Optional[pulumi.Input[builtins.str]] = None,
                 headers: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 id_attribute: Optional[pulumi.Input[builtins.str]] = None,
                 insecure: Optional[pulumi.Input[builtins.bool]] = None,
                 key_file: Optional[pulumi.Input[builtins.str]] = None,
                 key_string: Optional[pulumi.Input[builtins.str]] = None,
                 oauth_client_credentials: Optional[pulumi.Input[Union['ProviderOauthClientCredentialsArgs', 'ProviderOauthClientCredentialsArgsDict']]] = None,
                 password: Optional[pulumi.Input[builtins.str]] = None,
                 rate_limit: Optional[pulumi.Input[builtins.float]] = None,
                 read_method: Optional[pulumi.Input[builtins.str]] = None,
                 root_ca_file: Optional[pulumi.Input[builtins.str]] = None,
                 root_ca_string: Optional[pulumi.Input[builtins.str]] = None,
                 test_path: Optional[pulumi.Input[builtins.str]] = None,
                 timeout: Optional[pulumi.Input[builtins.float]] = None,
                 update_method: Optional[pulumi.Input[builtins.str]] = None,
                 uri: Optional[pulumi.Input[builtins.str]] = None,
                 use_cookies: Optional[pulumi.Input[builtins.bool]] = None,
                 username: Optional[pulumi.Input[builtins.str]] = None,
                 write_returns_object: Optional[pulumi.Input[builtins.bool]] = None,
                 xssi_prefix: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        The provider type for the restapi package. By default, resources use package-wide configuration
        settings, however an explicit `Provider` instance may be created and passed during resource
        construction to achieve fine-grained programmatic control over provider settings. See the
        [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] cert_file: When set with the key_file parameter, the provider will load a client certificate as a file for mTLS authentication.
        :param pulumi.Input[builtins.str] cert_string: When set with the key_string parameter, the provider will load a client certificate as a string for mTLS authentication.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] copy_keys: When set, any PUT to the API for an object will copy these keys from the data the provider has gathered about the
               object. This is useful if internal API information must also be provided with updates, such as the revision of the
               object.
        :param pulumi.Input[builtins.str] create_method: Defaults to `POST`. The HTTP method used to CREATE objects of this type on the API server.
        :param pulumi.Input[builtins.bool] create_returns_object: Set this when the API returns the object created only on creation operations (POST). This is used by the provider to
               refresh internal data structures.
        :param pulumi.Input[builtins.bool] debug: Enabling this will cause lots of debug information to be printed to STDOUT by the API client.
        :param pulumi.Input[builtins.str] destroy_method: Defaults to `DELETE`. The HTTP method used to DELETE objects of this type on the API server.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] headers: A map of header names and values to set on all outbound requests. This is useful if you want to use a script via the
               'external' provider or provide a pre-approved token or change Content-Type from `application/json`. If `username` and
               `password` are set and Authorization is one of the headers defined here, the BASIC auth credentials take precedence.
        :param pulumi.Input[builtins.str] id_attribute: When set, this key will be used to operate on REST objects. For example, if the ID is set to 'name', changes to the API
               object will be to http://foo.com/bar/VALUE_OF_NAME. This value may also be a '/'-delimeted path to the id attribute if
               it is multple levels deep in the data (such as `attributes/id` in the case of an object `{ "attributes": { "id": 1234 },
               "config": { "name": "foo", "something": "bar"}}`
        :param pulumi.Input[builtins.bool] insecure: When using https, this disables TLS verification of the host.
        :param pulumi.Input[builtins.str] key_file: When set with the cert_file parameter, the provider will load a client certificate as a file for mTLS authentication.
               Note that this mechanism simply delegates to golang's tls.LoadX509KeyPair which does not support passphrase protected
               private keys. The most robust security protections available to the key_file are simple file system permissions.
        :param pulumi.Input[builtins.str] key_string: When set with the cert_string parameter, the provider will load a client certificate as a string for mTLS
               authentication. Note that this mechanism simply delegates to golang's tls.LoadX509KeyPair which does not support
               passphrase protected private keys. The most robust security protections available to the key_file are simple file system
               permissions.
        :param pulumi.Input[Union['ProviderOauthClientCredentialsArgs', 'ProviderOauthClientCredentialsArgsDict']] oauth_client_credentials: Configuration for oauth client credential flow using the https://pkg.go.dev/golang.org/x/oauth2 implementation
        :param pulumi.Input[builtins.str] password: When set, will use this password for BASIC auth to the API.
        :param pulumi.Input[builtins.float] rate_limit: Set this to limit the number of requests per second made to the API.
        :param pulumi.Input[builtins.str] read_method: Defaults to `GET`. The HTTP method used to READ objects of this type on the API server.
        :param pulumi.Input[builtins.str] root_ca_file: When set, the provider will load a root CA certificate as a file for mTLS authentication. This is useful when the API
               server is using a self-signed certificate and the client needs to trust it.
        :param pulumi.Input[builtins.str] root_ca_string: When set, the provider will load a root CA certificate as a string for mTLS authentication. This is useful when the API
               server is using a self-signed certificate and the client needs to trust it.
        :param pulumi.Input[builtins.str] test_path: If set, the provider will issue a read_method request to this path after instantiation requiring a 200 OK response
               before proceeding. This is useful if your API provides a no-op endpoint that can signal if this provider is configured
               correctly. Response data will be ignored.
        :param pulumi.Input[builtins.float] timeout: When set, will cause requests taking longer than this time (in seconds) to be aborted.
        :param pulumi.Input[builtins.str] update_method: Defaults to `PUT`. The HTTP method used to UPDATE objects of this type on the API server.
        :param pulumi.Input[builtins.str] uri: URI of the REST API endpoint. This serves as the base of all requests.
        :param pulumi.Input[builtins.bool] use_cookies: Enable cookie jar to persist session.
        :param pulumi.Input[builtins.str] username: When set, will use this username for BASIC auth to the API.
        :param pulumi.Input[builtins.bool] write_returns_object: Set this when the API returns the object created on all write operations (POST, PUT). This is used by the provider to
               refresh internal data structures.
        :param pulumi.Input[builtins.str] xssi_prefix: Trim the xssi prefix from response string, if present, before parsing.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ProviderArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The provider type for the restapi package. By default, resources use package-wide configuration
        settings, however an explicit `Provider` instance may be created and passed during resource
        construction to achieve fine-grained programmatic control over provider settings. See the
        [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.

        :param str resource_name: The name of the resource.
        :param ProviderArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ProviderArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cert_file: Optional[pulumi.Input[builtins.str]] = None,
                 cert_string: Optional[pulumi.Input[builtins.str]] = None,
                 copy_keys: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 create_method: Optional[pulumi.Input[builtins.str]] = None,
                 create_returns_object: Optional[pulumi.Input[builtins.bool]] = None,
                 debug: Optional[pulumi.Input[builtins.bool]] = None,
                 destroy_method: Optional[pulumi.Input[builtins.str]] = None,
                 headers: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 id_attribute: Optional[pulumi.Input[builtins.str]] = None,
                 insecure: Optional[pulumi.Input[builtins.bool]] = None,
                 key_file: Optional[pulumi.Input[builtins.str]] = None,
                 key_string: Optional[pulumi.Input[builtins.str]] = None,
                 oauth_client_credentials: Optional[pulumi.Input[Union['ProviderOauthClientCredentialsArgs', 'ProviderOauthClientCredentialsArgsDict']]] = None,
                 password: Optional[pulumi.Input[builtins.str]] = None,
                 rate_limit: Optional[pulumi.Input[builtins.float]] = None,
                 read_method: Optional[pulumi.Input[builtins.str]] = None,
                 root_ca_file: Optional[pulumi.Input[builtins.str]] = None,
                 root_ca_string: Optional[pulumi.Input[builtins.str]] = None,
                 test_path: Optional[pulumi.Input[builtins.str]] = None,
                 timeout: Optional[pulumi.Input[builtins.float]] = None,
                 update_method: Optional[pulumi.Input[builtins.str]] = None,
                 uri: Optional[pulumi.Input[builtins.str]] = None,
                 use_cookies: Optional[pulumi.Input[builtins.bool]] = None,
                 username: Optional[pulumi.Input[builtins.str]] = None,
                 write_returns_object: Optional[pulumi.Input[builtins.bool]] = None,
                 xssi_prefix: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ProviderArgs.__new__(ProviderArgs)

            __props__.__dict__["cert_file"] = cert_file
            __props__.__dict__["cert_string"] = cert_string
            __props__.__dict__["copy_keys"] = pulumi.Output.from_input(copy_keys).apply(pulumi.runtime.to_json) if copy_keys is not None else None
            __props__.__dict__["create_method"] = create_method
            __props__.__dict__["create_returns_object"] = pulumi.Output.from_input(create_returns_object).apply(pulumi.runtime.to_json) if create_returns_object is not None else None
            __props__.__dict__["debug"] = pulumi.Output.from_input(debug).apply(pulumi.runtime.to_json) if debug is not None else None
            __props__.__dict__["destroy_method"] = destroy_method
            __props__.__dict__["headers"] = pulumi.Output.from_input(headers).apply(pulumi.runtime.to_json) if headers is not None else None
            __props__.__dict__["id_attribute"] = id_attribute
            __props__.__dict__["insecure"] = pulumi.Output.from_input(insecure).apply(pulumi.runtime.to_json) if insecure is not None else None
            __props__.__dict__["key_file"] = key_file
            __props__.__dict__["key_string"] = key_string
            __props__.__dict__["oauth_client_credentials"] = pulumi.Output.from_input(oauth_client_credentials).apply(pulumi.runtime.to_json) if oauth_client_credentials is not None else None
            __props__.__dict__["password"] = password
            __props__.__dict__["rate_limit"] = pulumi.Output.from_input(rate_limit).apply(pulumi.runtime.to_json) if rate_limit is not None else None
            __props__.__dict__["read_method"] = read_method
            __props__.__dict__["root_ca_file"] = root_ca_file
            __props__.__dict__["root_ca_string"] = root_ca_string
            __props__.__dict__["test_path"] = test_path
            __props__.__dict__["timeout"] = pulumi.Output.from_input(timeout).apply(pulumi.runtime.to_json) if timeout is not None else None
            __props__.__dict__["update_method"] = update_method
            if uri is None and not opts.urn:
                raise TypeError("Missing required property 'uri'")
            __props__.__dict__["uri"] = uri
            __props__.__dict__["use_cookies"] = pulumi.Output.from_input(use_cookies).apply(pulumi.runtime.to_json) if use_cookies is not None else None
            __props__.__dict__["username"] = username
            __props__.__dict__["write_returns_object"] = pulumi.Output.from_input(write_returns_object).apply(pulumi.runtime.to_json) if write_returns_object is not None else None
            __props__.__dict__["xssi_prefix"] = xssi_prefix
        super(Provider, __self__).__init__(
            'restapi',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @property
    @pulumi.getter(name="certFile")
    def cert_file(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        When set with the key_file parameter, the provider will load a client certificate as a file for mTLS authentication.
        """
        return pulumi.get(self, "cert_file")

    @property
    @pulumi.getter(name="certString")
    def cert_string(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        When set with the key_string parameter, the provider will load a client certificate as a string for mTLS authentication.
        """
        return pulumi.get(self, "cert_string")

    @property
    @pulumi.getter(name="createMethod")
    def create_method(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        Defaults to `POST`. The HTTP method used to CREATE objects of this type on the API server.
        """
        return pulumi.get(self, "create_method")

    @property
    @pulumi.getter(name="destroyMethod")
    def destroy_method(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        Defaults to `DELETE`. The HTTP method used to DELETE objects of this type on the API server.
        """
        return pulumi.get(self, "destroy_method")

    @property
    @pulumi.getter(name="idAttribute")
    def id_attribute(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        When set, this key will be used to operate on REST objects. For example, if the ID is set to 'name', changes to the API
        object will be to http://foo.com/bar/VALUE_OF_NAME. This value may also be a '/'-delimeted path to the id attribute if
        it is multple levels deep in the data (such as `attributes/id` in the case of an object `{ "attributes": { "id": 1234 },
        "config": { "name": "foo", "something": "bar"}}`
        """
        return pulumi.get(self, "id_attribute")

    @property
    @pulumi.getter(name="keyFile")
    def key_file(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        When set with the cert_file parameter, the provider will load a client certificate as a file for mTLS authentication.
        Note that this mechanism simply delegates to golang's tls.LoadX509KeyPair which does not support passphrase protected
        private keys. The most robust security protections available to the key_file are simple file system permissions.
        """
        return pulumi.get(self, "key_file")

    @property
    @pulumi.getter(name="keyString")
    def key_string(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        When set with the cert_string parameter, the provider will load a client certificate as a string for mTLS
        authentication. Note that this mechanism simply delegates to golang's tls.LoadX509KeyPair which does not support
        passphrase protected private keys. The most robust security protections available to the key_file are simple file system
        permissions.
        """
        return pulumi.get(self, "key_string")

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        When set, will use this password for BASIC auth to the API.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="readMethod")
    def read_method(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        Defaults to `GET`. The HTTP method used to READ objects of this type on the API server.
        """
        return pulumi.get(self, "read_method")

    @property
    @pulumi.getter(name="rootCaFile")
    def root_ca_file(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        When set, the provider will load a root CA certificate as a file for mTLS authentication. This is useful when the API
        server is using a self-signed certificate and the client needs to trust it.
        """
        return pulumi.get(self, "root_ca_file")

    @property
    @pulumi.getter(name="rootCaString")
    def root_ca_string(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        When set, the provider will load a root CA certificate as a string for mTLS authentication. This is useful when the API
        server is using a self-signed certificate and the client needs to trust it.
        """
        return pulumi.get(self, "root_ca_string")

    @property
    @pulumi.getter(name="testPath")
    def test_path(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        If set, the provider will issue a read_method request to this path after instantiation requiring a 200 OK response
        before proceeding. This is useful if your API provides a no-op endpoint that can signal if this provider is configured
        correctly. Response data will be ignored.
        """
        return pulumi.get(self, "test_path")

    @property
    @pulumi.getter(name="updateMethod")
    def update_method(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        Defaults to `PUT`. The HTTP method used to UPDATE objects of this type on the API server.
        """
        return pulumi.get(self, "update_method")

    @property
    @pulumi.getter
    def uri(self) -> pulumi.Output[builtins.str]:
        """
        URI of the REST API endpoint. This serves as the base of all requests.
        """
        return pulumi.get(self, "uri")

    @property
    @pulumi.getter
    def username(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        When set, will use this username for BASIC auth to the API.
        """
        return pulumi.get(self, "username")

    @property
    @pulumi.getter(name="xssiPrefix")
    def xssi_prefix(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        Trim the xssi prefix from response string, if present, before parsing.
        """
        return pulumi.get(self, "xssi_prefix")

