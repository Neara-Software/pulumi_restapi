# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetObjectResult',
    'AwaitableGetObjectResult',
    'get_object',
    'get_object_output',
]

@pulumi.output_type
class GetObjectResult:
    """
    A collection of values returned by getObject.
    """
    def __init__(__self__, api_data=None, api_response=None, debug=None, id=None, id_attribute=None, path=None, query_string=None, read_query_string=None, results_key=None, search_data=None, search_key=None, search_path=None, search_value=None):
        if api_data and not isinstance(api_data, dict):
            raise TypeError("Expected argument 'api_data' to be a dict")
        pulumi.set(__self__, "api_data", api_data)
        if api_response and not isinstance(api_response, str):
            raise TypeError("Expected argument 'api_response' to be a str")
        pulumi.set(__self__, "api_response", api_response)
        if debug and not isinstance(debug, bool):
            raise TypeError("Expected argument 'debug' to be a bool")
        pulumi.set(__self__, "debug", debug)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if id_attribute and not isinstance(id_attribute, str):
            raise TypeError("Expected argument 'id_attribute' to be a str")
        pulumi.set(__self__, "id_attribute", id_attribute)
        if path and not isinstance(path, str):
            raise TypeError("Expected argument 'path' to be a str")
        pulumi.set(__self__, "path", path)
        if query_string and not isinstance(query_string, str):
            raise TypeError("Expected argument 'query_string' to be a str")
        pulumi.set(__self__, "query_string", query_string)
        if read_query_string and not isinstance(read_query_string, str):
            raise TypeError("Expected argument 'read_query_string' to be a str")
        pulumi.set(__self__, "read_query_string", read_query_string)
        if results_key and not isinstance(results_key, str):
            raise TypeError("Expected argument 'results_key' to be a str")
        pulumi.set(__self__, "results_key", results_key)
        if search_data and not isinstance(search_data, str):
            raise TypeError("Expected argument 'search_data' to be a str")
        pulumi.set(__self__, "search_data", search_data)
        if search_key and not isinstance(search_key, str):
            raise TypeError("Expected argument 'search_key' to be a str")
        pulumi.set(__self__, "search_key", search_key)
        if search_path and not isinstance(search_path, str):
            raise TypeError("Expected argument 'search_path' to be a str")
        pulumi.set(__self__, "search_path", search_path)
        if search_value and not isinstance(search_value, str):
            raise TypeError("Expected argument 'search_value' to be a str")
        pulumi.set(__self__, "search_value", search_value)

    @property
    @pulumi.getter(name="apiData")
    def api_data(self) -> Mapping[str, builtins.str]:
        return pulumi.get(self, "api_data")

    @property
    @pulumi.getter(name="apiResponse")
    def api_response(self) -> builtins.str:
        return pulumi.get(self, "api_response")

    @property
    @pulumi.getter
    def debug(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "debug")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idAttribute")
    def id_attribute(self) -> Optional[builtins.str]:
        return pulumi.get(self, "id_attribute")

    @property
    @pulumi.getter
    def path(self) -> builtins.str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="queryString")
    def query_string(self) -> Optional[builtins.str]:
        return pulumi.get(self, "query_string")

    @property
    @pulumi.getter(name="readQueryString")
    def read_query_string(self) -> Optional[builtins.str]:
        return pulumi.get(self, "read_query_string")

    @property
    @pulumi.getter(name="resultsKey")
    def results_key(self) -> Optional[builtins.str]:
        return pulumi.get(self, "results_key")

    @property
    @pulumi.getter(name="searchData")
    def search_data(self) -> Optional[builtins.str]:
        return pulumi.get(self, "search_data")

    @property
    @pulumi.getter(name="searchKey")
    def search_key(self) -> builtins.str:
        return pulumi.get(self, "search_key")

    @property
    @pulumi.getter(name="searchPath")
    def search_path(self) -> Optional[builtins.str]:
        return pulumi.get(self, "search_path")

    @property
    @pulumi.getter(name="searchValue")
    def search_value(self) -> builtins.str:
        return pulumi.get(self, "search_value")


class AwaitableGetObjectResult(GetObjectResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetObjectResult(
            api_data=self.api_data,
            api_response=self.api_response,
            debug=self.debug,
            id=self.id,
            id_attribute=self.id_attribute,
            path=self.path,
            query_string=self.query_string,
            read_query_string=self.read_query_string,
            results_key=self.results_key,
            search_data=self.search_data,
            search_key=self.search_key,
            search_path=self.search_path,
            search_value=self.search_value)


def get_object(debug: Optional[builtins.bool] = None,
               id: Optional[builtins.str] = None,
               id_attribute: Optional[builtins.str] = None,
               path: Optional[builtins.str] = None,
               query_string: Optional[builtins.str] = None,
               read_query_string: Optional[builtins.str] = None,
               results_key: Optional[builtins.str] = None,
               search_data: Optional[builtins.str] = None,
               search_key: Optional[builtins.str] = None,
               search_path: Optional[builtins.str] = None,
               search_value: Optional[builtins.str] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetObjectResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['debug'] = debug
    __args__['id'] = id
    __args__['idAttribute'] = id_attribute
    __args__['path'] = path
    __args__['queryString'] = query_string
    __args__['readQueryString'] = read_query_string
    __args__['resultsKey'] = results_key
    __args__['searchData'] = search_data
    __args__['searchKey'] = search_key
    __args__['searchPath'] = search_path
    __args__['searchValue'] = search_value
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('restapi:index/getObject:getObject', __args__, opts=opts, typ=GetObjectResult, package_ref=_utilities.get_package()).value

    return AwaitableGetObjectResult(
        api_data=pulumi.get(__ret__, 'api_data'),
        api_response=pulumi.get(__ret__, 'api_response'),
        debug=pulumi.get(__ret__, 'debug'),
        id=pulumi.get(__ret__, 'id'),
        id_attribute=pulumi.get(__ret__, 'id_attribute'),
        path=pulumi.get(__ret__, 'path'),
        query_string=pulumi.get(__ret__, 'query_string'),
        read_query_string=pulumi.get(__ret__, 'read_query_string'),
        results_key=pulumi.get(__ret__, 'results_key'),
        search_data=pulumi.get(__ret__, 'search_data'),
        search_key=pulumi.get(__ret__, 'search_key'),
        search_path=pulumi.get(__ret__, 'search_path'),
        search_value=pulumi.get(__ret__, 'search_value'))
def get_object_output(debug: Optional[pulumi.Input[Optional[builtins.bool]]] = None,
                      id: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                      id_attribute: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                      path: Optional[pulumi.Input[builtins.str]] = None,
                      query_string: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                      read_query_string: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                      results_key: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                      search_data: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                      search_key: Optional[pulumi.Input[builtins.str]] = None,
                      search_path: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                      search_value: Optional[pulumi.Input[builtins.str]] = None,
                      opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetObjectResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['debug'] = debug
    __args__['id'] = id
    __args__['idAttribute'] = id_attribute
    __args__['path'] = path
    __args__['queryString'] = query_string
    __args__['readQueryString'] = read_query_string
    __args__['resultsKey'] = results_key
    __args__['searchData'] = search_data
    __args__['searchKey'] = search_key
    __args__['searchPath'] = search_path
    __args__['searchValue'] = search_value
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('restapi:index/getObject:getObject', __args__, opts=opts, typ=GetObjectResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetObjectResult(
        api_data=pulumi.get(__response__, 'api_data'),
        api_response=pulumi.get(__response__, 'api_response'),
        debug=pulumi.get(__response__, 'debug'),
        id=pulumi.get(__response__, 'id'),
        id_attribute=pulumi.get(__response__, 'id_attribute'),
        path=pulumi.get(__response__, 'path'),
        query_string=pulumi.get(__response__, 'query_string'),
        read_query_string=pulumi.get(__response__, 'read_query_string'),
        results_key=pulumi.get(__response__, 'results_key'),
        search_data=pulumi.get(__response__, 'search_data'),
        search_key=pulumi.get(__response__, 'search_key'),
        search_path=pulumi.get(__response__, 'search_path'),
        search_value=pulumi.get(__response__, 'search_value')))
